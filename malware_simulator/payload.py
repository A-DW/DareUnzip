import os
import time
import platform

# This is the payload file.
banner = """
###########################
# Hello from the payload! #
###########################-----------------------------------+
| This is a simple payload that simulates malicious activity. |
+-------------------------------------------------------------+
"""
print(banner)

# Prints a message indicating the payload is running.
print("The payload is now executing...")

# Checks the machine's Operating System (OS) and prints it.
print("Detecting the operating system...\n\n" + "-" * 50 + "\n")
time.sleep(1)  # Simulate a delay for effect

# It is important to know the OS for compatibility with the payload.
# We could use 'os.name' to identify the OS type, however it will provide a very basic output:
# For example, it will return 'nt' for Windows and 'posix' for Unix-like systems (e.g. Linux, macOS and BSD).
# In order to get more detailed information, we can use 'platform.system()' which gives us a more specific OS name (while not providing as much detail as 'platform.platform()').
operating_system = platform.system()
time.sleep(1)  # Simulate a delay for effect

# Print the detected OS. This is useful for debugging and understanding the environment.
print("Detected Operating System:", operating_system)

supported = False # Start with the assumption that the OS is not supported.

if operating_system == "Windows":
    print("Windows OS detected.") # If this was a real payload, we might use Windows-specific commands or libraries.
    supported = True  # Set supported to True since we are on a Windows machine.
    time.sleep(1)  # Simulate a delay for effect
elif operating_system == "Linux":
    print("Linux OS detected. Checking for vulnerabilities...") # If this was a real payload, we might use Linux-specific commands or libraries.
    time.sleep(1)  # Simulate a delay for effect
    os_info = {}
    # /etc/os-release is tha standard way to get distribution information on modern Linux systems.
    # The payload will try to parse it to ensure we're on a supported distribution
    try:
        with open("/etc/os-release", "r") as f:
            for line in f:
                if "=" in line:
                    key, value = line.strip().split('=',1)
                    os_info[key.strip()] = value.strip().strip('"')
    except FileNotFoundError:
        #if /etx/os-release doesn't exist, we can't verify the destribution.
        print("Could not find /etc/os-release. Unable to verify Linux distribution.")
        exit(0)  # Terminate the script since it does not perform any actions on unsupported distributions.
        pass

    distro_id = os_info.get('ID', '').lower()
    id_like = os_info.get('ID_LIKE', '').lower()

    # The payload is targeting Ubuntu and Debian-based distributions.
    if distro_id == 'ubuntu' or 'debian' in id_like.split():
        pretty_name = os_info.get('PRETTY_NAME', 'a Debian-based distribution')
        print(f"Compatible distribution detected: {pretty_name}.")
        supported = True
    else:
        # If the distribution is not supported, we print a message and exit.
        if os_info:
            pretty_name = os_info.get('PRETTY_NAME', 'this distribution')
            print(f"Unsupported Linux distribution: {pretty_name}")
            exit(0)  # Terminate the script since it does not perform any actions on unsupported distributions.

elif operating_system == "Darwin":
    print("macOS detected.") # If this was a real payload, we might use macOS-specific commands or libraries.
    if supported:
        print("Note: This payload does not perform any actions or supported on macOS. Consider going into a Windows or Ubuntu machine.")
    exit(0) # Terminate the script since it does not perform any actions on macOS.
elif operating_system == "FreeBSD":
    print("FreeBSD OS detected.") # If this was a real payload, we might use FreeBSD-specific commands or libraries.
    if supported:
        print("Note: This payload does not perform any actions or supported on FreeBSD. Consider going into a Windows or Ubuntu machine.")
    exit(0) # Terminate the script since it does not perform any actions on FreeBSD.
else:
    print("Unknown OS detected.") # In this case, the OS could be the various BSDs or other less common systems.
    if supported:
        print("Note: This payload does not perform any actions or supported on unknown OSes. Consider going into a Windows or Ubuntu machine.")
    exit(0) # Terminate the script since it does not perform any actions on unknown OSes.

# ATTENTION: This script DOES NOT perform anything on the BSD family, macOS or other OSes, so it will terminate!

# Start a simple payload that simulates a malicious action.
# This could be anything from opening a reverse shell to exfiltrating data.
# Get the MAC address of the machine.
# Get the IP address of the machine, along with the Wi-Fi's SSID connected.
# Get the logged-in users, and the in-use user.
# Get the system's hostname.
# Get the system's uptime.
# Get the system's architecture.
# Get the system's kernel version.
# Get the system's CPU usage and information.
# Get the system's memory usage and information.
# Get the system's disk usage and information.
# Get the system's network interfaces.
# Get the system's running processes.
# Get the system's open files.
# Get the system's environment variables.
# Get the system's installed packages.
# Get the system's running services.
# Get the system's scheduled tasks.
# Get the system's logs.
# Get the system's firewall rules.
# Get the system's network connections.
# Get the system's network statistics.